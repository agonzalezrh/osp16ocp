- block:
  - name: fix grub entries to have name start with GRUB_
    replace:
      path: /etc/default/grub
      regexp: ^(TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS)(.*)
      replace: GRUB_\1\2
  - name: fix grub entries in append statement
    replace:
      path: /etc/default/grub
      regexp: (.*){(TRIPLEO_HEAT_TEMPLATE_KERNEL_ARGS)}(.*)
      replace: \1{GRUB_\2}\3
  name: upgrade prepare for leapp to align kernel arg shortcommings in leapp
  tags:
  - never
  - system_upgrade
  - system_upgrade_prepare
  when:
  - step|int == 3
  - upgrade_leapp_enabled
- name: Gather missing facts
  setup:
    gather_subset: distribution
  tags:
  - never
  - nova_hybrid_state
  when: ansible_facts['distribution'] is not defined or ansible_facts['distribution_major_version']
    is not defined
- block:
  - args:
      creates: /etc/sysconfig/ip6tables.n-o-upgrade
    name: blank ipv6 rule before activating ipv6 firewall.
    shell: cat /etc/sysconfig/ip6tables > /etc/sysconfig/ip6tables.n-o-upgrade; cat</dev/null>/etc/sysconfig/ip6tables
  - name: cleanup unmanaged rules pushed by iptables-services
    shell: "iptables -C INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT &>/dev/null\
      \ && \\\n  iptables -D INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n\
      iptables -C INPUT -p icmp -j ACCEPT &>/dev/null && \\\n  iptables -D INPUT -p\
      \ icmp -j ACCEPT\niptables -C INPUT -i lo -j ACCEPT &>/dev/null && \\\n  iptables\
      \ -D INPUT -i lo -j ACCEPT\niptables -C INPUT -p tcp -m state --state NEW -m\
      \ tcp --dport 22 -j ACCEPT &>/dev/null && \\\n  iptables -D INPUT -p tcp -m\
      \ state --state NEW -m tcp --dport 22 -j ACCEPT\niptables -C INPUT -j REJECT\
      \ --reject-with icmp-host-prohibited &>/dev/null && \\\n  iptables -D INPUT\
      \ -j REJECT --reject-with icmp-host-prohibited\niptables -C FORWARD -j REJECT\
      \ --reject-with icmp-host-prohibited &>/dev/null && \\\n  iptables -D FORWARD\
      \ -j REJECT --reject-with icmp-host-prohibited\n\nsed -i '/^-A INPUT -m state\
      \ --state RELATED,ESTABLISHED -j ACCEPT$/d' /etc/sysconfig/iptables\nsed -i\
      \ '/^-A INPUT -p icmp -j ACCEPT$/d' /etc/sysconfig/iptables\nsed -i '/^-A INPUT\
      \ -i lo -j ACCEPT$/d' /etc/sysconfig/iptables\nsed -i '/^-A INPUT -p tcp -m\
      \ state --state NEW -m tcp --dport 22 -j ACCEPT$/d' /etc/sysconfig/iptables\n\
      sed -i '/^-A INPUT -j REJECT --reject-with icmp-host-prohibited$/d' /etc/sysconfig/iptables\n\
      sed -i '/^-A FORWARD -j REJECT --reject-with icmp-host-prohibited$/d' /etc/sysconfig/iptables\n\
      \nip6tables -C INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT &>/dev/null\
      \ && \\\n  ip6tables -D INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n\
      ip6tables -C INPUT -p ipv6-icmp -j ACCEPT &>/dev/null && \\\n  ip6tables -D\
      \ INPUT -p ipv6-icmp -j ACCEPT\nip6tables -C INPUT -i lo -j ACCEPT &>/dev/null\
      \ && \\\n  ip6tables -D INPUT -i lo -j ACCEPT\nip6tables -C INPUT -p tcp -m\
      \ state --state NEW -m tcp --dport 22 -j ACCEPT &>/dev/null && \\\n  ip6tables\
      \ -D INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\nip6tables\
      \ -C INPUT -d fe80::/64 -p udp -m udp --dport 546 -m state --state NEW -j ACCEPT\
      \ &>/dev/null && \\\n  ip6tables -D INPUT -d fe80::/64 -p udp -m udp --dport\
      \ 546 -m state --state NEW -j ACCEPT\nip6tables -C INPUT -j REJECT --reject-with\
      \ icmp6-adm-prohibited &>/dev/null && \\\n  ip6tables -D INPUT -j REJECT --reject-with\
      \ icmp6-adm-prohibited\nip6tables -C FORWARD -j REJECT --reject-with icmp6-adm-prohibited\
      \ &>/dev/null && \\\n  ip6tables -D FORWARD -j REJECT --reject-with icmp6-adm-prohibited\n\
      \nsed -i '/^-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT$/d' /etc/sysconfig/ip6tables\n\
      sed -i '/^-A INPUT -p ipv6-icmp -j ACCEPT$/d' /etc/sysconfig/ip6tables\nsed\
      \ -i '/^-A INPUT -i lo -j ACCEPT$/d' /etc/sysconfig/ip6tables\nsed -i '/^-A\
      \ INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT$/d' /etc/sysconfig/ip6tables\n\
      sed -i '/^-A INPUT -d fe80::\\/64 -p udp -m udp --dport 546 -m state --state\
      \ NEW -j ACCEPT$/d' /etc/sysconfig/ip6tables\nsed -i '/^-A INPUT -j REJECT --reject-with\
      \ icmp6-adm-prohibited$/d' /etc/sysconfig/ip6tables\nsed -i '/^-A FORWARD -j\
      \ REJECT --reject-with icmp6-adm-prohibited$/d' /etc/sysconfig/ip6tables"
  when: step|int == 3
- name: Gather missing facts
  setup:
    gather_subset: distribution
  tags:
  - always
  when: ansible_facts['distribution'] is not defined or ansible_facts['distribution_major_version']
    is not defined
- name: Set leapp facts
  set_fact:
    upgrade_leapp_command_options: ''
    upgrade_leapp_debug: true
    upgrade_leapp_devel_skip: ''
    upgrade_leapp_enabled: "{{ _upgradeLeappEnabled | bool and\n   ansible_facts['distribution']\
      \ == 'RedHat' and\n   ansible_facts['distribution_major_version'] is version('7',\
      \ '==') }}"
    upgrade_leapp_post_reboot_delay: 120
    upgrade_leapp_reboot_timeout: 3600
  tags:
  - always
  vars:
    _upgradeLeappEnabled: false
- block:
  - ignore_errors: true
    name: Hack around broken ceph-common rpm removing /etc/ceph /var/lib/ceph
    shell: 'rpm -e --nodeps --noscripts ceph-common

      '
  - name: remove all OpenStack packages
    shell: yum -y remove *el7ost* galera* xinetd* haproxy* httpd kernel-devel mysql*
      pacemaker* python-jsonpointer qemu-kvm-common-rhev qemu-img-rhev rabbit* redis*
      -- -*openvswitch* -python-docker -python-PyMySQL -python-pysocks -python2-asn1crypto
      -python2-babel -python2-cffi -python2-cryptography -python2-dateutil -python2-idna
      -python2-ipaddress -python2-jinja2 -python2-jsonpatch -python2-markupsafe -python2-pyOpenSSL
      -python2-requests -python2-six -python2-urllib3 -python2-chardet
  - name: Run LeappRepoInitCommand
    shell: '#!/bin/bash


      '
  - name: Check if system was booted via EFI
    register: efi
    stat:
      path: /sys/firmware/efi
  - failed_when: false
    name: Check if efi partition is present in /etc/fstab
    register: efi_fstab
    shell: 'grep efi /etc/fstab

      '
  - failed_when: false
    name: Find out the UUID of UEFI device
    register: efi_dev
    shell: 'blkid -s UUID -o value "$(blkid -t TYPE=vfat | grep -i efi | cut -d '':''
      -f1)"

      '
  - failed_when: false
    name: Check if red is in efibootmgr
    register: efi_broken
    shell: 'efibootmgr | grep "red$"

      '
  - block:
    - copy:
        dest: /tmp/workaround_1925078_redhat/
        remote_src: true
        src: /boot/efi/EFI/redhat/
      name: Copy /boot/efi/EFI/redhat to /tmp
    - lineinfile:
        dest: /etc/fstab
        line: UUID={{ efi_dev.stdout }} /boot/efi vfat umask=0077 0 1
      name: Insert /etc/fstab record
    - command: mount /boot/efi
      name: Mount the /boot/efi
    - copy:
        dest: /boot/efi/EFI/redhat/
        remote_src: true
        src: /tmp/workaround_1925078_redhat/
      name: Copy /tmp/redhat to /boot/efi/EFI/redhat
    - name: Create boot record
      shell: 'DEVICE_PATH="$(blkid -t TYPE=vfat | grep -i efi | cut -d '':'' -f1)"

        DEVICE="$(lsblk -no pkname $DEVICE_PATH)"

        PARTITION="$(echo $DEVICE_PATH | awk ''{print $NF}'' FS=/$DEVICE)"

        efibootmgr -c -L ''Red Hat Enterprise Linux'' -d $(echo $DEVICE_PATH | sed
        s/$PARTITION\$//) -p $PARTITION -l ''\EFI\redhat\shimx64.efi''

        '
    - command: grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg
      name: Create grub config file
    - command: rmmod btrfs
      failed_when: false
      name: Remove btrfs module in case fuse just loaded it
    - name: Set workaround_1925078_fired
      set_fact:
        workaround_1925078_fired: true
    when:
    - efi_fstab.rc is defined
    - efi_dev.rc is defined
    - efi_broken.rc is defined
    - efi.stat.exists|bool
    - efi_fstab.rc == 1
    - efi_dev.rc == 0
    - efi_broken.rc == 0
  - name: install leapp
    package:
      name: leapp
      state: latest
  - delegate_to: undercloud
    find:
      paths: /etc/leapp/files
      patterns: '*'
    name: Retrieve files in /etc/leapp/files
    register: uc_leapp_files
  - delegate_to: undercloud
    fetch:
      dest: '{{ playbook_dir }}'
      src: '{{ item.path }}'
    loop: '{{ uc_leapp_files.files }}'
    name: Fetch the Leapp data from undercloud
  - copy:
      dest: '{{ item.path }}'
      src: '{{ playbook_dir }}/{{ inventory_hostname }}/{{ item.path }}'
    loop: '{{ uc_leapp_files.files }}'
    name: Copy the Leapp data from undercloud
  - name: Run LeappInitCommand
    shell: '#!/bin/bash


      '
  - file:
      path: /etc/modules-load.d/nf_conntrack_proto_sctp.conf
      state: absent
    name: Remove obsolete nf_conntrack_proto_sctp from /etc/modules-load.d/
  - lineinfile:
      line: '{{ item }}'
      path: /etc/leapp/transaction/to_remove
    loop: '{{ pkg_to_remove }}'
    name: add packages into Leapp's to_remove file
    vars:
      pkg_to_remove: []
  - lineinfile:
      line: '{{ item }}'
      path: /etc/leapp/transaction/to_install
    loop: '{{ pkg_to_install }}'
    name: add packages into Leapp's to_install file
    vars:
      pkg_to_install: []
  - name: check sshd_config file
    register: sshd_config_result
    stat:
      path: /etc/ssh/sshd_config
  - lineinfile:
      line: PermitRootLogin without-password
      path: /etc/ssh/sshd_config
      regexp: ^(# *)?PermitRootLogin
    name: add PermitRootLogin option for leapp
  name: system_upgrade_prepare step 3
  tags:
  - never
  - system_upgrade
  - system_upgrade_prepare
  when:
  - step|int == 3
  - upgrade_leapp_enabled
- name: Check for os-net-config upgrade
  register: os_net_config_need_upgrade
  shell: yum check-upgrade | awk '/os-net-config/{print}'
  when: step|int == 3
- failed_when: false
  name: Check that os-net-config has configuration
  register: os_net_config_has_config
  shell: test -s /etc/os-net-config/config.json
  when: step|int == 3
- block:
  - name: Upgrade os-net-config
    package: name=os-net-config state=latest
  - changed_when: os_net_config_upgrade.rc == 2
    command: os-net-config --no-activate -c /etc/os-net-config/config.json -v --detailed-exit-codes
    failed_when: os_net_config_upgrade.rc not in [0,2]
    name: take new os-net-config parameters into account now
    register: os_net_config_upgrade
  when:
  - step|int == 3
  - os_net_config_need_upgrade.stdout
  - os_net_config_has_config.rc == 0
- name: Set boolean skip_package_update
  set_fact:
    skip_package_update: false
- name: Update all packages
  when:
  - step|int == 3
  - not skip_package_update|bool
  yum:
    exclude: ansible
    name: '*'
    state: latest
